#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
self_file =
  if File.symlink?(__FILE__)
    require 'pathname'
    Pathname.new(__FILE__).realpath
  else
    __FILE__
  end
$:.unshift(File.dirname(self_file) + "/../lib")

require 'torrentsync'
require 'choice'

Choice.options do
  option :list do
    short '-l'
  end
  option :sync do
    short '-s'
  end
  option :balance do
    short '-b'
  end
  option :dryrun do
    short '-n'
  end
  option :remove do
    short '-r'
  end
  option :purge do
    short '-p'
  end
  option :check do
    short '-c'
  end
end

load_torrents_db
c = Choice.choices
if c.list
  peers = get_peers
  torrents, status = get_torrents(peers, false)
  capacity = 0
  peerinfo = {}
  peers.each do |peer|
    setting = find_peer_setting(peer[1], peer[2])
    next if setting.nil?
    size = parse_size(setting['size'])
    peerinfo[[peer[1], peer[2]].join(':')] = {
      :size => size, :total => 0, :have => 0
    }
    capacity += size
  end
  filesize1 = 0
  filesize2 = 0
  torrents.each do |hash, t|
    name = t[:name]
    total = t[:peers].inject(0.0){|v,h|v + h[1]}
    t[:peers].each do |pr|
      peerinfo[pr[0]][:total] += (t[:size] * pr[1]).to_i
      peerinfo[pr[0]][:have] += 1
    end
    filesize1 += t[:size]
    filesize2 += (t[:size] * total).to_i
    puts "%s %d(%3d%%) %11d %s" % [hash, t[:peers].size, (total * 100).to_i,
        t[:size], name]
  end
  puts
  peerinfo.each do |key, val|
    total = val[:total] / (1024.0 ** 3)
    size = val[:size] / (1024.0 ** 3)
    have = val[:have]
    puts "%40s %6.1f GB / %6.1f GB (%4d torrents)" % [key, total, size, have]
  end
  puts
  puts "Total Size : %6.1f GB" % (filesize1 / (1024.0 ** 3))
  puts "Used       : %6.1f GB" % (filesize2 / (1024.0 ** 3))
  puts "Capacity   : %6.1f GB" % (capacity / (1024.0 ** 3))
elsif c.sync or c.balance
  rep = c.sync.to_i rescue 2
  peers = get_peers
  torrents, status = get_torrents(peers)
  dead_peers = status.select{|k,v| v == :dead}.map(&:first)
  live_peers = peers - dead_peers
  balance = c.balance
  if balance
    peer = live_peers.find{|pr| pr.join(':').include?(balance)}
    host, port, user, pass, tls = peer[1], peer[2].to_i, peer[3], peer[4], peer[5]
    peer = type2class(peer[0]).new(host, port, user, pass, tls)
    inc = {}
    torrents.each do |hash, t|
      next unless t[:peers].any?{|pr| pr[0].include?(balance)}
      next if rand < 0.50
      if t[:peers].size > rep
        next if t[:peers].any?{|pr| pr[1] < 1.0}
        puts "reduce #{t[:name]}"
        begin
          peer.remove(hash, true) unless c.dryrun
        rescue
        end
      else
        puts "replicate #{t[:name]}"
        inc[hash] = t
      end
    end
    torrents = inc
    rep += 1
  end
  sync_torrents(live_peers, torrents, rep, c.dryrun)
elsif c.remove || c.purge
  purge = c.purge
  id = c.remove || purge
  purge = !purge.nil?
  peers = get_peers
  torrents, status = get_torrents(peers)
  t = torrents[id]
  unless t
    puts 'not found'
    exit 1
  end
  hps = t[:peers].map{|hp| host, port = hp[0].split(':'); [host, port.to_i]}
  haves = peers.select do |peer|
    hps.any?{|hp| peer[1] == hp[0] && peer[2] == hp[1]}
  end
  haves.each do |peer|
    type = peer[0]
    host, port, user, pass, tls = peer[1], peer[2].to_i, peer[3], peer[4], peer[5]
    peer = type2class(type).new(host, port, user, pass, tls)
    puts "remove torrent from #{host}:#{port}"
    begin
      peer.remove(id, purge) unless c.dryrun
    rescue
    end
  end
elsif c.check
  # TODO DRY
  id = c.check
  peers = get_peers
  torrents, status = get_torrents(peers)
  t = torrents[id]
  unless t
    puts 'not found'
    exit 1
  end
  hps = t[:peers].map{|hp| host, port = hp[0].split(':'); [host, port.to_i]}
  haves = peers.select do |peer|
    hps.any?{|hp| peer[1] == hp[0] && peer[2] == hp[1]}
  end
  haves.each do |peer|
    type = peer[0]
    host, port, user, pass, tls = peer[1], peer[2].to_i, peer[3], peer[4], peer[5]
    peer = type2class(type).new(host, port, user, pass, tls)
    puts "check torrent of #{host}:#{port}"
    begin
      peer.check(id) unless c.dryrun
    rescue
    end
  end
end
save_torrents_db
